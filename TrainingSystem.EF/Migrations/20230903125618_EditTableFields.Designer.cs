// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingSystem.EF.Data;

namespace TrainingSystem.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230903125618_EditTableFields")]
    partial class EditTableFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LookupCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnName("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookupCategoryId");

                    b.ToTable("Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8482),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 100,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "عمل",
                            NameEn = "Work"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8850),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 100,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "جامعة",
                            NameEn = "University"
                        },
                        new
                        {
                            Id = 3,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8867),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = ".Net",
                            NameEn = "DotNet"
                        },
                        new
                        {
                            Id = 4,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8870),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محلل أعمال",
                            NameEn = "BusinessAnalyst"
                        },
                        new
                        {
                            Id = 5,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8872),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مراقبة الجودة",
                            NameEn = "QualityControl"
                        },
                        new
                        {
                            Id = 6,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8875),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "بنية الأنظمة",
                            NameEn = "Infrastructure"
                        },
                        new
                        {
                            Id = 7,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8878),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "واجهة المستخدم وتجربة المستخدم",
                            NameEn = "UI_UX"
                        },
                        new
                        {
                            Id = 8,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8882),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الموارد البشرية",
                            NameEn = "HumanResources"
                        },
                        new
                        {
                            Id = 9,
                            Code = 7,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8885),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "المالية",
                            NameEn = "Finance"
                        },
                        new
                        {
                            Id = 10,
                            Code = 8,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8888),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الذكاء الاصطناعي",
                            NameEn = "AI"
                        },
                        new
                        {
                            Id = 11,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8891),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نشط",
                            NameEn = "Active"
                        },
                        new
                        {
                            Id = 12,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8894),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "قيد الانتظار",
                            NameEn = "Pending"
                        },
                        new
                        {
                            Id = 13,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8896),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مكتمل",
                            NameEn = "Finished"
                        },
                        new
                        {
                            Id = 14,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8899),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الانضمام إلى فريق TPS",
                            NameEn = "Joining_TPS_Team"
                        },
                        new
                        {
                            Id = 15,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8901),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "معلق",
                            NameEn = "On_Hold"
                        },
                        new
                        {
                            Id = 16,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8903),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مرفوض",
                            NameEn = "Rejected"
                        },
                        new
                        {
                            Id = 17,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8905),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "استقال",
                            NameEn = "Quit"
                        },
                        new
                        {
                            Id = 18,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8908),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "خالد سلامة",
                            NameEn = "Khalid_Salameh"
                        },
                        new
                        {
                            Id = 19,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8911),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "لميس حوراني",
                            NameEn = "Lamees_Hourani"
                        },
                        new
                        {
                            Id = 20,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8913),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مريم السعداوي",
                            NameEn = "Mariam_AlSadawi"
                        },
                        new
                        {
                            Id = 21,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8915),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محمد حماد",
                            NameEn = "Mohammad_Hamad"
                        },
                        new
                        {
                            Id = 22,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8918),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محمد عبده",
                            NameEn = "Mohammad_Ibdah"
                        },
                        new
                        {
                            Id = 23,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8920),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "صفاء",
                            NameEn = "Safaa"
                        },
                        new
                        {
                            Id = 24,
                            Code = 7,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8922),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "زكريا لافي",
                            NameEn = "Zakaria_Lafi"
                        },
                        new
                        {
                            Id = 25,
                            Code = 8,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8924),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "أحمد سويلم",
                            NameEn = "Ahmed_Sweilem"
                        },
                        new
                        {
                            Id = 26,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8926),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2023",
                            NameEn = "Year2023"
                        },
                        new
                        {
                            Id = 27,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8929),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2024",
                            NameEn = "Year2024"
                        },
                        new
                        {
                            Id = 28,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8931),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2025",
                            NameEn = "Year2025"
                        },
                        new
                        {
                            Id = 29,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8933),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2026",
                            NameEn = "Year2026"
                        },
                        new
                        {
                            Id = 30,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8935),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2027",
                            NameEn = "Year2027"
                        },
                        new
                        {
                            Id = 31,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8938),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2028",
                            NameEn = "Year2028"
                        },
                        new
                        {
                            Id = 32,
                            Code = 7,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8940),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2029",
                            NameEn = "Year2029"
                        },
                        new
                        {
                            Id = 33,
                            Code = 8,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8942),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2030",
                            NameEn = "Year2030"
                        },
                        new
                        {
                            Id = 34,
                            Code = 9,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 422, DateTimeKind.Local).AddTicks(8944),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "Year2031",
                            NameEn = "Year2031"
                        });
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.LookupCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnName("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("LookupCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 100,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 420, DateTimeKind.Local).AddTicks(466),
                            Description = "Training Type That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نوع التدريب",
                            NameEn = "Training Type"
                        },
                        new
                        {
                            CategoryId = 200,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 421, DateTimeKind.Local).AddTicks(2891),
                            Description = "Training Topics That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "موضوعات التدريب",
                            NameEn = "Training Topics"
                        },
                        new
                        {
                            CategoryId = 300,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 421, DateTimeKind.Local).AddTicks(2947),
                            Description = "Training Status",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "حالة التدريب",
                            NameEn = "Training Status"
                        },
                        new
                        {
                            CategoryId = 400,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 421, DateTimeKind.Local).AddTicks(2952),
                            Description = "Training Result",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نتيجة التدريب",
                            NameEn = "Training Result"
                        },
                        new
                        {
                            CategoryId = 500,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 421, DateTimeKind.Local).AddTicks(2954),
                            Description = "Trainer Name",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "أسم المدرب",
                            NameEn = "Trainer Name"
                        },
                        new
                        {
                            CategoryId = 600,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 9, 3, 15, 56, 17, 421, DateTimeKind.Local).AddTicks(2957),
                            Description = "Training Year That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "السنة",
                            NameEn = "Year"
                        });
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("EvaluationScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinalPresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnName("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int?>("ResultLookupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StatusLookupId")
                        .HasColumnType("int");

                    b.Property<string>("TraineeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerLookupId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerName")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTopic")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingTopicLookupId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingType")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingTypeLookupId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("ResultLookupId");

                    b.HasIndex("StatusLookupId");

                    b.HasIndex("TrainerLookupId");

                    b.HasIndex("TrainingTopicLookupId");

                    b.HasIndex("TrainingTypeLookupId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.Lookup", b =>
                {
                    b.HasOne("TrainingSystem.Core.Models.LookupCategory", "LookupCategory")
                        .WithMany("Lookups")
                        .HasForeignKey("LookupCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingSystem.Core.Models.Session", b =>
                {
                    b.HasOne("TrainingSystem.Core.Models.Lookup", "ResultLookup")
                        .WithMany()
                        .HasForeignKey("ResultLookupId");

                    b.HasOne("TrainingSystem.Core.Models.Lookup", "StatusLookup")
                        .WithMany()
                        .HasForeignKey("StatusLookupId");

                    b.HasOne("TrainingSystem.Core.Models.Lookup", "TrainerLookup")
                        .WithMany()
                        .HasForeignKey("TrainerLookupId");

                    b.HasOne("TrainingSystem.Core.Models.Lookup", "TrainingTopicLookup")
                        .WithMany()
                        .HasForeignKey("TrainingTopicLookupId");

                    b.HasOne("TrainingSystem.Core.Models.Lookup", "TrainingTypeLookup")
                        .WithMany()
                        .HasForeignKey("TrainingTypeLookupId");
                });
#pragma warning restore 612, 618
        }
    }
}
